{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Medium Data in the Tidyverse\"\nauthor: \"Mike Frank\"\ndate: \"6/22/2017\"\noutput: html_document\n---\n\nStarting note: The best reference for this material is Hadley Wickham's [R for data scientists](http://r4ds.had.co.nz/). My contribution here is to translate this reference for psychology.\n\n```{r setup, include=FALSE}\nlibrary(tidyverse)\nlibrary(DT) # dependency\nlibrary(ggthemes) # dependency\nlibrary(wordbankr)\nlibrary(purrr)\nlibrary(shiny)\n\nknitr::opts_chunk$set(echo = TRUE, cache=TRUE)\n```\n\n<!-- ----------------------------------------------------------------------- -->\n# Goals and Introduction\n\nBy the end of this tutorial, you will know:\n\n+ What \"tidy data\" is and why it's an awesome format\n+ How to do some stuff with tidy data\n+ How to get your data to be tidy\n+ Some tips'n'tricks for dealing with \"medium data\" in R\n\nThis intro will describe a few concepts that you will need to know, using the famous `iris` dataset that comes with `ggplot2`.\n\n## Data frames\n\nThe basic data structure we're working with is the data frame, or `tibble` (in the `tidyverse` reimplementation). \nData frames have rows and columns, and each column has a distinct data type. The implementation in Python's `pandas` is distinct but most of the concepts are the same. \n\n`iris` is a data frame showing the measurements of a bunch of different instances of iris flowers from different species. (Sepals are the things outside the petals of the flowers that protect the petals while it's blooming, petals are the actual petals of the flower).\n\n```{r}\nhead(iris)\n```\n\n> **Exercise.** R is a very flexible programming language, which is both a strength and a weakness. There are many ways to get a particular value of a variable in a data frame. You can use `$` to access a column, as in `iris$Sepal.Length` or you can treat the data frame as a matrix, e.g. `iris[1,1]` or even as a list, as in `iris[[1]]`. You can also mix numeric references and named references, e.g. `iris[[\"Sepal.Length\"]]`. Turn to your neighbor (and/or google) and find as many ways as you can to access the petal length of the third iris in the dataset (row 3).\n\n```{r}\n# fill me in with calls to the iris dataset that all return the same cell (third from the top, Petal Length).\n\n```\n\n> **Discussion.** Why might some ways of doing this be better than others? \n\n## Tidy data\n\n> “Tidy datasets are all alike, but every messy dataset is messy in its own way.” –– Hadley Wickham\n\nHere's the basic idea: In tidy data, every row is a single **observation** (trial), and every column describes a **variable** with some **value** describing that trial. \n\nAnd if you know that data are formatted this way, then you can do amazing things, basically because you can take a uniform approach to the dataset. From R4DS:\n\n\"There’s a general advantage to picking one consistent way of storing data. If you have a consistent data structure, it’s easier to learn the tools that work with it because they have an underlying uniformity. There’s a specific advantage to placing variables in columns because it allows R’s vectorised nature to shine.\"\n\n`iris` is a tidy dataset. Each row is an observation of an individual iris, each column is a different variable. \n\n> **Exercise.** Take a look at these data, as downloaded from Amazon Mechanical Turk. They describe an experiment where people had to estimate the price of a dog, a plasma TV, and a sushi dinner (and they were primed with anchors that differed across conditions). It's a replication of a paper by [Janiszewksi & Uy (2008)](http://warrington.ufl.edu/departments/mkt/docs/janiszewski/Anchor.pdf). Examine this dataset with your nextdoor neighbor and sketch out what a tidy version of the dataset would look like (using paper and pencil).\n\n```{r}\nju <- read_csv(\"data/janiszewski_rep_cleaned.csv\")\nhead(ju)\n```\n\n## Functions and Pipes\n\nEverything you typically want to do in statistical programming uses **functions**. `mean` is a good example. `mean` takes one **argument**, a numeric vector. \n\n```{r}\nmean(iris$Petal.Length)\n```\n\nWe're going to call this **applying** the function `mean` to the variable `Petal.Length`.\n\nPipes are a way to write strings of functions more easily. They bring the first argument of the function to the bedginning. So you can write:\n\n```{r}\niris$Petal.Length %>% mean\n```\n\nThat's not very useful yet, but when you start **nesting** functions, it gets better. \n\n```{r}\nmean(unique(iris$Petal.Length))\niris$Petal.Length %>% unique() %>% mean(na.rm=TRUE)\n```\n\nor \n\n```{r}\nround(mean(unique(iris$Petal.Length)), digits = 2)\niris$Petal.Length %>% unique %>% mean %>% round(digits = 2)\n\n# indenting makes things even easier to read\niris$Petal.Length %>% \n  unique %>% \n  mean %>% \n  round(digits = 2)\n```\n\nThis can be super helpful for writing strings of functions so that they are readable and distinct. \n\nWe'll be doing a lot of piping of functions with multiple arguments later, and it will really help keep our syntax simple. \n\n> **Exercise.** Rewrite these commands using pipes and check that they do the same thing! (Or at least produce the same output). Unpiped version:\n\n```{r}\nlength(unique(iris$Species)) # number of species\n```\n\nPiped version:\n\n```{r}\niris$Species %>% \n  unique %>%\n  length\n```\n\n## `ggplot2` and tidy data\n\nThe last piece of our workflow here is going to be the addition of visualiation elements. `ggplot2` is a plotting package that easily takes advantage of tidy data. ggplots have two important parts (there are of course more):\n\n+ `aes` - the aesthetic mapping, or which data variables get mapped to which visual variables (x, y, color, symbol, etc.)\n+ `geom` - the plotting objects that represent the data (points, lines, shapes, etc.)\n\n```{r}\niris %>%\n  ggplot(aes(x = Sepal.Width, y = Sepal.Length, col = Species)) + \n  geom_point()\n```\n\nAnd just to let you know my biases, I like `theme_few` from `ggthemes` and `scale_color_solarized` as my palette.  \n\n```{r}\niris %>%\n  ggplot(aes(Sepal.Width, Sepal.Length, col = Species)) + \n  geom_point() + \n  ggthemes::theme_few() + \n  ggthemes::scale_color_solarized() \n```\n\n<!-- ----------------------------------------------------------------------- -->\n# Tidy Data Analysis with `dplyr`\n\nReference: [R4DS Chapter 5](http://r4ds.had.co.nz/transform.html)\n\nLet's take a psychological dataset. Here are the raw data from [Stiller, Goodman, & Frank (2015)].\n\nThese data are tidy: each row describes a single trial, each column describes some aspect of tha trial, including their id (`subid`), age (`age`), condition (`condition` - \"label\" is the experimental condition, \"No Label\" is the control), item (`item` - which thing furble was trying to find). \n\nWe are going to manipulate these data using \"verbs\" from `dplyr`. I'll only teach four verbs, the most common in my workflow (but there are many other useful ones):\n\n+ `filter` - remove rows by some logical condition\n+ `mutate` - create new columns \n+ `group_by` - group the data into subsets by some column\n+ `summarize` - apply some function over columns in each group  \n\n\n## Exploring and characterizing the dataset\n\n\n```{r}\nsgf <- read_csv(\"data/stiller_scales_data.csv\")\nsgf\n```\n\nInspect the various variables before you start any analysis. Lots of people recommend `summary` but TBH I don't find it useful. \n\n```{r}\nsummary(sgf)\n```\n\nThis output just feels overwhelming and uninformative. \n\nYou can look at each variable by itself:\n\n```{r}\nunique(sgf$condition)\n\nsgf$subid %>%\n unique %>%\n length\n```\n\nOr use interactive tools like `View` or `DT::datatable` (which I really like).\n\n```{r}\nView(sgf)\nDT::datatable(sgf)\n```\n\n## Filtering & Mutating\n\nThere are lots of reasons you might want to remove *rows* from your dataset, including getting rid of outliers, selecting subpopulations, etc. `filter` is a verb (function) that takes a data frame as its first argument, and then as its second takes the **condition** you want to filter on. \n\nSo if you wanted to look only at two year olds, you could do this. (Note you can give two conditions, could also do `age > 2 & age < 3`). (equivalent: `filter(sgf, age > 2, age < 3)`)\n\nNote that we're going to be using pipes with functions over data frames here. The way this works is that:\n\n+ `dplyr` verbs always take the data frame as their first argument, and\n+ because pipes pull out the first argument, the data frame just gets passed through successive operations\n+ so you can read a pipe chain as \"take this data frame and first do this, then do this, then do that.\"\n\nThis is essentially the huge insight of `dplyr`: you can chain verbs into readable and efficient sequences of operations over dataframes, provided 1) the verbs all have the same syntax (which they do) and 2) the data all have the same structure (which they do if they are tidy). \n\nOK, so filtering:\n\n```{r}\nsgf %>%\n  filter(age > 2, \n         age < 3) \n```\n\n**Exercise.** Filter out only the \"face\" trial in the \"Label\" condition.\n\n```{r}\nsgf %>%\n  filter(condition == \"Label\", \n         item == \"faces\")\n\nsgf[sgf$condition == \"Label\" & sgf$item == \"faces\", ] # all the columns\n```\n\nThere are also times when you want to add or remove *columns*. You might want to remove columns to simplify the dataset. There's not much to simplify here, but if you wanted to do that, the verb is `select`. \n\n```{r}\nsgf %>%\n  select(subid, age, correct) \n\nsgf %>%\n  select(-condition) \n\nsgf %>%\n  select(1) \n\nsgf %>%\n  select(starts_with(\"sub\")) \n\n# learn about this with ?select\n```\n\nPerhaps more useful is *adding columns*. You might do this perhaps to compute some kind of derived variable. `mutate` is the verb for these situations - it allows you to add a column. Let's add a discrete age group factor to our dataset.\n\n```{r}\nsgf <- sgf %>%\n  mutate(age_group = cut(age, 2:5, include.lowest = TRUE), \n         age_group_halfyear = cut(age, seq(2,5,.5), include.lowest = TRUE))\n\n# sgf$age_group <- cut(sgf$age, 2:5, include.lowest = TRUE)\n# sgf$age_group <- with(sgf, cut(age, 2:5, include.lowest = TRUE))\n\nhead(sgf$age_group)\n```\n\n## Standard psychological descriptives\n\nWe typically describe datasets at the level of subjects, not trials. We need two verbs to get a summary at the level of subjects: `group_by` and `summarise` (kiwi spelling). Grouping alone doesn't do much.\n\n```{r}\nsgf %>%\n  group_by(age_group) \n```\n\nAll it does is add a grouping marker. \n\nWhat `summarise` does is to *apply a function* to a part of the dataset to create a new summary dataset. So we can apply the function `mean` to the dataset and get the grand mean. \n\n```{r}\n## DO NOT DO THIS!!!\n# foo <- initialize_the_thing_being_bound()\n# for (i in 1:length(unique(sgf$item))) {\n#   for (j in 1:length(unique(sgf$condition))) {\n#     this_data <- sgf[sgf$item == unique(sgf$item)[i] & \n#                       sgf$condition == unique(sgf$condition)[n],]\n#     do_a_thing(this_data)\n#     bind_together_somehow(this_data)\n#   }\n# }\n\nsgf %>%\n  summarise(correct = mean(correct))\n```\nNote the syntax here: `summarise` takes multiple  `new_column_name = function_to_be_applied_to_data(data_column)` entries in a list. Using this syntax, we can create more elaborate summary datasets also:\n\n```{r}\nsgf %>%\n  summarise(correct = mean(correct), \n            n_observations = length(subid))\n```\n\nWhere these two verbs shine is in combination, though. Because `summarise` applies functions to columns in your *grouped data*, not just to the whole dataset!\n\nSo we can group by age or condition or whatever else we want and then carry out the same procedure, and all of a sudden we are doing something extremely useful!\n\n```{r}\nsgf_means <- sgf %>%\n  group_by(age_group, condition) %>%\n  summarise(correct = mean(correct), \n            n_observations = length(subid))\nsgf_means\n```\n\nThese summary data are typically very useful for plotting. .\n\n```{r}\nggplot(sgf_means, \n       aes(x = age_group, y = correct, col = condition, group = condition)) + \n  geom_line() + \n  ylim(0,1) +\n  ggthemes::theme_few()\n\n# sgf %>%\n#   mutate(age_group) %>%\n#   group_by() %>%\n#   summarise %>%\n#   ggplot()\n\n```\n\n> **Exercise.** One of the most important analytic workflows for psychological data is to take some function (e.g., the mean) *for each participant* and then look at grand means and variability *across participant means*. This analytic workflow requires grouping, summarising, and then grouping again and summarising again! Use `dplyr` to make the same table as above (`sgf_means`) but with means (and SDs if you want) computed across subject means, not across all data points. (The means will be pretty similar as this is a balanced design but in a case with lots of missing data, they will vary. In contrast, the SD doesn't even really make sense across the binary data before you aggregate across subjects.) \n\n```{r}\n# exercise\nsgf_sub_means <- sgf %>%\n  group_by(age_group, condition, subid) %>%\n  summarise(correct = mean(correct)) \n\nsgf_grand_means <- sgf_sub_means %>%\n  group_by(age_group, condition) %>%\n  summarise(mean_correct = mean(correct), \n            sd_correct = sd(correct))\n```\n\n<!-- ----------------------------------------------------------------------- -->\n# Getting to Tidy with `tidyr`\n\nReference: [R4DS Chapter 12](http://r4ds.had.co.nz/tidy-data.html)\n\nPsychological data often comes in two flavors: *long* and *wide* data. Long form data is *tidy*, but that format is less common. It's much more common to get *wide* data, in which every row is a case (e.g., a subject), and each column is a variable. In this format multiple trials (observations) are stored as columns. \n\nThis can go a bunch of ways, for example, the most common might be to have subjects as rows and trials as columns. But here's an example from a real dataset on \"unconscious arithmetic\" from [Sklar et al. (2012)](http://www.pnas.org/content/109/48/19614.short). In it, *items* (particular arithmetic problems) are rows and *subjects* are columns. \n\n\n```{r}\nsklar <- read_csv(\"data/sklar_data.csv\")\nhead(sklar)\n```\n\n## Tidy verbs\n\nThe two main verbs for tidying are `gather` and `spread`. (There are lots of others in the `tidyr` package if you want to split or merge columns etc.). \n\nFirst, let's go *away* from tidiness. We're going to `spread` a tidy dataset. Remember that tidy data has one observation in each row, but we want to \"spread\" it out so it's wide. (The metaphor works better in this description). This may not be helpful, but I think of the data as a long cream cheese pat, and I \"spread\" it over a wide bagel. \n\nLet's try it on the SGF data above. First we'll spread it so it's wide. I do this by indicating what column is going to be the *column labels* in the new data frame, here it's `item`, and what column is going to have the *values* in those columns, here it's `correct`:\n\n```{r}\nsgf_wide <- sgf %>% \n  spread(item, correct)\nhead(sgf_wide)\n```\n\nNow you can see that there is no explicit specification that all those item columns, e.g. `faces`, `beds` are holding `correct` values, but the data are much more compact. (This form is easy to work with in Excel, so that's probably why people use it in psych). \n\nOK, let's go back to our original format. `gather` is about making wide data into tidy (long) data. When you gather a dataset you are \"gathering\" a bunch of columns (maybe that you previously `spread`). You specify what all the columns have in common (e.g., they are all `subject_id`s in the example above), and you say what measure they all contain (they all have RTs). So in that sense, it's the flip of `spread`. You did `spread(item, correct)` and now you'll `gather(item, correct, ...)`. The one extra argument is that you need to specify the columns that will go into `item`! \n\n```{r}\nsgf_long <- sgf_wide %>% \n  gather(item, correct, beds, faces, houses, pasta)\nhead(sgf_long)\nhead(sgf)\n```\n\nThere are lots of flexible ways to specify these columns - you can enumerate their names like I did. \n\n```{r}\n# gather(item, correct, 5:8)\n# gather(item, correct, starts_with(\"foo\"))\n```\n\n> **Exercise.** Take the Sklar data from above, where each column is a separate subject, and `gather` it so that it's a tidy dataset. What challenges come up? \n\n```{r}\nsklar\n```\n\n```{r}\nsklar_tidy <- sklar %>%\n  gather(subid, rt, 8:28)\n\nsklar_tidy\n```\n\nLet's also go back and tidy an easier one: `iris`.\n\n```{r}\niris\n```\n\n```{r}\niris %>%\n  mutate(iris_id = 1:nrow(iris)) %>%\n  gather(measurement, centimeters, Sepal.Length, Petal.Length, Sepal.Width, Petal.Width)\n```\n\n\n\n<!-- ----------------------------------------------------------------------- -->\n# A bigger worked example: Wordbank data\n\nWe're going to be using some data on vocabulary growth that we load from the Wordbank database. [Wordbank](http://wordbank.stanford.edu) is a database of children's language learning. \n\n(Go explore it for a moment).\n\nWe're going to look at data from the English Words and Sentences form. These data describe the repsonses of parents to questions about whether their child says 680 different words. \n\n`dplyr` really shines in this context. \n\n```{r}\n# to avoid dependency on the wordbankr package, we cache these data. \n# ws <- wordbankr::get_administration_data(language = \"English\", \n#                                          form = \"WS\")\n\nws <- read_csv(\"data/ws.csv\")\n```\n\nTake a look at the data that comes out. \n\n```{r}\nDT::datatable(ws)\n```\n\n\n```{r}\nggplot(ws, aes(x = age, y = production)) + \n  geom_point()\n```\n\nAside: How can we fix this plot? Suggestions from group? \n\n```{r}\nggplot(ws, aes(x = age, y = production)) + \n  geom_jitter(size = .5, width = .25, height = 0, alpha = .3)\n```\n\nOk, let's plot the relationship between sex and productive vocabulary, using `dplyr`.\n\n```{r}\nggplot(ws, aes(x = age, y = production, col=sex)) + \n  geom_jitter(size = .5, width = .25, height = 0, alpha = .3)\n```\nThis is a bit useless, because the variability is so high. So let's summarise!\n\n> **Exercise.** Get means and SDs of productive vocabulary (`production`) by `age` and `sex`. Filter the kids with missing data for `sex` (coded by `NA`).  \n\nHINT: `is.na(x)` is useful for filtering.\n\n```{r}\n# View(ws)\nws_sex <- ws %>%\n  filter(!is.na(sex)) %>%\n  group_by(age, sex) %>%\n  summarise(production = mean(production),\n            production_sd = sd(production)) \nws_sex\n```\n\nNow plot:\n\n```{r}\nggplot(ws_sex, \n       aes(x = age, y = production, col = sex)) + \n  geom_line() + \n  geom_jitter(data = filter(ws, !is.na(sex)), \n              size = .5, width = .25, height = 0, alpha = .3) + \n  geom_linerange(aes(ymin = production - production_sd, \n                     ymax = production + production_sd), \n                 position = position_dodge(width = .2)) # keep SDs from overlapping\n```\n\n**Bonus: Compute effect size.**\n\n```{r}\n# instructor demo\n```\n\n\n<!-- ----------------------------------------------------------------------- -->\n# Exciting stuff you can do with this workflow\n\nHere are three little demos of exciting stuff that you can do (and that are facilitated by this workflow).\n\n## Reading bigger files, faster\n\nA few other things will help you with \"medium size data\":\n\n+ `read_csv` - Much faster than `read.csv` and has better defaults. \n+ `dbplyr` - For connecting directly to databases. This package got forked off of `dplyr` recently but is very useful.\n+ `feather` - The `feather` package is a fast-loading binary format that is interoperable with python. All you need to know is `write_feather(d, \"filename\")` and `read_feather(\"filename\")`. \n\nHere's a timing demo for `read.csv`, `read_csv`, and `read_feather`. \n\n```{r}\nsystem.time(read.csv(\"data/ws.csv\"))\nsystem.time(read_csv(\"data/ws.csv\"))\nsystem.time(feather::read_feather(\"data/ws.feather\"))\n```\nI see about a 2x speedup for `read_csv` (bigger for bigger files) and a 20x speedup for `read_feather`.\n\n## Interactive visualization\n\nThe `shiny` package is a great way to do interactives in R. We'll walk through constructing a simple shiny app for the wordbank data here. \n\nTechnically, this is [embedded shiny](http://rmarkdown.rstudio.com/authoring_embedded_shiny.html) as opposed to freestanding shiny apps (like Wordbank). \n\nThe two parts of a shiny app are `ui` and `server`. Both of these are funny in that they are lists of other things. The `ui` is a list of elements of an HTML page, and the server is a list of \"reactive\" elements. In brief, the UI says what should be shown, and the server specifies the mechanics of how to create those elements. \n\nThis little embedded shiny app shows a page with two elements: 1) a selector that lets you choose a demographic field, and 2) a plot of vocabulary split by that field. \n\nThe server then has the job of splitting the data by that field (for `ws_split`) and rendering the plot (`agePlot`).\n\nThe one fancy thing that's going on here is that the app makes use of the calls `group_by_` (in the `dplyr` chain) and `aes_` (for the `ggplot` call). These `_` functions are a little complex - they are an example of \"standard evaluation\" that lets you feed *actual variables* into `ggplot2` and `dplyr` rather than *names of variables*. For more information, there is a nice vignette on standard and non-standard evaluation: try `(vignette(\"nse\")`.\n\n```{r}\nshinyApp(\n  ui <- fluidPage(\n    selectInput(\"demographic\", \"Demographic Split Variable\", \n                c(\"Sex\" = \"sex\", \"Maternal Education\" = \"mom_ed\",\n                  \"Birth Order\" = \"birth_order\", \"Ethnicity\" = \"ethnicity\")),\n    plotOutput(\"agePlot\")\n  ),\n  \n  server <- function(input, output) {\n    ws_split <- reactive({\n      ws %>%\n        group_by_(\"age\", input$demographic) %>%\n        summarise(production_mean = mean(production))\n    })\n    \n    output$agePlot <- renderPlot({\n      ggplot(ws_split(), \n             aes_(quote(age), quote(production_mean), col = as.name(input$demographic))) + \n        geom_line() \n    })\n  },\n  \n  options = list(height = 500)\n)\n```\n\n## Function application \n\nAs I've tried to highlight, `dplyr` is actually all about applying functions. `summarise` is a verb that helps you apply functions to chunks of data and then bind them together. But that creates a requirement that all the functions return a single value (e.g., `mean`). There are lots of things you can do that summarise data but *don't* return a single value. For example, maybe you want to run a linear regression and return the slope *and* the intercept. \n\nFor that, I want to highlight two things. \n\nOne is `do`, which allows function application to grouped data. The only tricky thing about using `do` is that you have to refer to the dataframe that you're working on as `.`. \n\nThe second is the amazing `broom` package, which provides methods to `tidy` the output of lots of different statistical models. So for example, you can run a linear regression on chunks of a dataset and get back out the coefficients in a data frame. \n\nHere's a toy example, again with Wordbank data. \n\n```{r}\nws %>%\n  filter(!is.na(sex)) %>%\n  group_by(sex) %>%\n  do(broom::tidy(lm(production ~ age, data = .)))\n```\n\nIn recent years, this workflow in R ihas gotten really good. `purrr` is an amazing package that introduces consistent ways to `map` functions. It's beyond the scope of the course. \n\n<!-- ----------------------------------------------------------------------- -->\n# Exercise solutions\n\nReturning the third cell.\n\n```{r}\niris$Petal.Length[3]\niris[3,3]\niris[3,\"Petal.Length\"]\niris[[3]][3]\niris[[\"Petal.Length\"]][3]\n# probably more?\n```\n\nPiped commands. \n\n```{r}\niris$Species %>%\n  unique %>%\n  length\n```\n\nMean of participant means.\n\n```{r}\nsgf %>%\n  group_by(age_group, subid) %>%\n  summarise(correct = mean(correct)) %>%\n  summarise(mean_correct = mean(correct), \n            sd_correct = sd(correct))\n```\n\nSklar tidying.\n\n```{r}\nsklar %>%\n  gather(participant, RT, 8:28) \n# might be a better way to select these columns than by number, e.g. regex\n```\n\nSex means.\n\n```{r}\nws_sex <- ws %>%\n  filter(!is.na(sex)) %>%\n  group_by(age, sex) %>%\n  summarise(production_sd = sd(production, na.rm=TRUE),\n            production_mean = mean(production))\n```\n\nEffect size. (Instructor demo)\n\n```{r}\nws_es <- ws_sex %>%\n  group_by(age) %>%\n  summarise(es = (production_mean[sex==\"Female\"] - production_mean[sex==\"Male\"]) / \n              mean(production_sd))\n\nggplot(ws_es, aes(x = age, y = es)) + \n  geom_point() + \n  geom_smooth(span = 1) + \n  ylab(\"Female advantage (standard deviations)\") + \n  xlab(\"Age (months)\")\n```",
    "created" : 1573005826628.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2784738416",
    "id" : "60019E42",
    "lastKnownWriteTime" : 1569881506,
    "last_content_update" : 1569881506,
    "path" : "~/Documents/PSYCH251/tidyverse-tutorial/tidyverse_tutorial.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}